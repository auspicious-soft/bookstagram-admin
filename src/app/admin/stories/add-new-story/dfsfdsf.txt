"use client";
import React, { useState, useTransition } from "react";
import Image from "next/image";
import preview from "@/assets/images/preview.png";
import { toast } from "sonner";
import { generateSignedUrlForStories } from "@/actions";
import { FormProvider, useForm } from "react-hook-form";
import * as yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";
import { addNewStory } from "@/services/admin-services";

type Language = "eng" | "kaz" | "rus";

interface FormValues {
  translations: {
    language: Language;
    name: string;
  }[];
  link: string;
}

const validationSchema = yup.object({
  translations: yup.array().of(
    yup.object({
      language: yup.string().oneOf(["eng", "kaz", "rus"]).required(),
      name: yup.string().required("Name is required"),
    })
  ),
  link: yup.string().url("Invalid link").required("Link is required"),
});

const Page = () => {
  const [isPending, startTransition] = useTransition();
  const [imagePreview, setImagePreview] = useState<string | null>(null);
  const [imageFile, setImageFile] = useState<File | null>(null);
  const [usedLanguages, setUsedLanguages] = useState<Set<Language>>(new Set(["eng"]));
  const methods = useForm<FormValues>({
    resolver: yupResolver(validationSchema) as any,
    defaultValues: {
      translations: [{ language: "eng", name: "" }],
      link: "",
    },
  });
  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
    getValues,
    watch,
  } = useForm<FormValues>({
    resolver: yupResolver(validationSchema) as any,
    defaultValues: {
      translations: [{ language: "eng", name: "" }],
      link: "",
    },
  });

  const translations = watch("translations");

  const triggerFileInputClick = () => {
    const fileInput = document.querySelector('input[type="file"]') as HTMLInputElement;
    if (fileInput) fileInput.click();
  };

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      setImageFile(file);

      const reader = new FileReader();
      reader.onload = (e) => {
        const result = e.target?.result as string;
        setImagePreview(result);
      };
      reader.readAsDataURL(file);
    }
  };

  const addTranslation = () => {
    const currentTranslations = getValues("translations");
    const availableLanguages: Language[] = ["eng", "kaz", "rus"];
    const unusedLanguage = availableLanguages.find(
      (lang) => !usedLanguages.has(lang as Language)
    ) as Language;

    if (unusedLanguage) {
      setValue("translations", [
        ...currentTranslations,
        { language: unusedLanguage, name: "" },
      ]);
      setUsedLanguages((prev) => new Set([...prev, unusedLanguage]));
    }
  };

  const removeTranslation = (index: number) => {
    const currentTranslations = getValues("translations");
    const languageToRemove = currentTranslations[index].language;
    
    const newTranslations = currentTranslations.filter((_, i) => i !== index);
    setValue("translations", newTranslations);
    
    setUsedLanguages((prev) => {
      const updated = new Set(prev);
      updated.delete(languageToRemove);
      return updated;
    });
  };

  const repeatBox = ()=> {

  }

  const onSubmit = async (data: FormValues) => {
    startTransition(async () => {
      try {
        let imageKey = null;
        const timestamp = Date.now();
        if (imageFile) {

          const { signedUrl, key } = await generateSignedUrlForStories(
            `${timestamp}-${name}`,
             imageFile.name,
            imageFile.type
          );

          const uploadResponse = await fetch(signedUrl, {
            method: "PUT",
            body: imageFile,
            headers: {
              "Content-Type": imageFile.type,
            },
          });

          if (!uploadResponse.ok) {
            throw new Error("Failed to upload image to S3");
          }

          imageKey = key;
        }

        // Transform translations array into name object
        const nameObject = data.translations.reduce((acc, { language, name }) => {
          acc[language] = name;
          return acc;
        }, {} as Record<Language, string>);

        const payload = {
          name: nameObject,
          image: imageKey,
          link: data.link
        };

        console.log('payload:', payload);
        const response = await addNewStory("/admin/banners", payload);

        if (response?.status === 201) {
          toast.success("Banner added successfully");
          window.location.href = "/admin/promotions"
        } else {
          toast.error("Failed to add banner");
        }
      } catch (error: any) {
        toast.error(
          error?.response?.status === 400
            ? error?.response?.data?.message
            : "An error occurred"
        );
      }
    });
  };


  return ( 
      <div className="bg-white p-5 rounded-[20px]">
        <div className="main-form bg-white p-[30px] rounded-[20px]">
        <FormProvider {...methods}>
          <form onSubmit={handleSubmit(onSubmit)} className="form-box">
            <div className="">
              {translations.map((_, index) => (
                <div key={index} className="mb-3">
                  <p className="mb-1 text-sm text-darkBlack">Name/Title of the banner</p>
                    <div className="flex items-center gap-[5px] w-full">
                      <label className="!flex bg-[#F5F5F5] rounded-[10px] w-full">
                        <select
                            {...register(`translations.${index}.language`)}
                            className="!mt-0 max-w-[80px] !bg-[#D9D9D9]"
                          >
                            <option value="eng">Eng</option>
                            <option value="kaz">Kaz</option>
                            <option value="rus">Rus</option>
                          </select>
                          <input
                            type="text"
                            {...register(`translations.${index}.name`)}
                            placeholder="Enter name"
                            className="!mt-0 flex-1"
                          />
                        </label>
                        {index === 0 ? (
                          <button
                            type="button"
                            onClick={addTranslation}
                            disabled={usedLanguages.size >= 3}
                            className="bg-[#70A1E5] text-white px-5 py-3 rounded-[10px] text-sm"
                          >
                            Add
                          </button>
                        ) : (
                          <button
                            type="button"
                            onClick={() => removeTranslation(index)}
                            className="bg-[#FF0004] text-white px-5 py-3 rounded-[10px] text-sm"
                          >
                            Remove
                          </button>
                        )}
                      </div>
                      {errors.translations?.[index]?.name && (
                        <p className="text-red-500 text-sm mt-1">
                          {errors.translations[index]?.name?.message}
                        </p>
                      )}
                    </div>
              ))}
            <div className="mt-10 ">
            <div className="repeat-section">
            <div className="custom relative mb-5">
                {imagePreview ? (
                  <div className="relative">
                    <Image
                      unoptimized
                      src={imagePreview}
                      alt="Preview"
                      width={340}
                      height={340}
                      className="rounded-[10px] w-full h-full object-cover"
                    />
                  </div>
                ) : (
                  <div className="grid place-items-center">
                    <Image
                      unoptimized
                      src={preview}
                      alt="upload"
                      width={340}
                      height={340}
                      className="rounded-[10px] w-full"
                    />
                  </div>
                )}
                <div className="relative mt-5">
                  <input
                    className="absolute top-0 left-0 h-full w-full opacity-0 p-0 cursor-pointer"
                    type="file"
                    accept="image/*"
                    onChange={handleImageChange}
                  />
                  {imagePreview ? (
                    <button
                      type="button"
                      onClick={triggerFileInputClick}
                      className="bg-orange text-white text-sm px-4 py-[14px] text-center rounded-[28px] w-full"
                    >
                      Edit
                    </button>
                  ) : (
                    <p
                      className="bg-orange text-white text-sm px-4 py-[14px] text-center rounded-[28px] cursor-pointer"
                      onClick={triggerFileInputClick}
                    >
                      Upload Image
                    </p>
                  )}
                </div>
            </div>
             <label>Link
              <input
                type="text" {...register("link")} placeholder="https://example.com" className="w-full"
               />
              {errors.link && (
                <p className="text-red-500 text-sm mt-1">
                  {errors.link.message}
                </p>
              )}
             </label>
             </div>
              <div> 
                <button onClick={repeatBox}>Add</button>
              </div>
                  </div>
                    <button
                      type="submit"
                      disabled={isPending}
                      className="bg-orange text-white text-sm px-4 mt-10 py-[14px] text-center rounded-[28px] w-full"
                    >Add New Banner</button>
                </div>
          </form>
          </FormProvider>
          </div>
      </div> 
  );
};

export default Page;

"use client";
import React, { useState, useTransition } from "react";
import Image from "next/image";
import preview from "@/assets/images/preview.png";
import { toast } from "sonner";
import { generateSignedUrlForStories } from "@/actions";
import { FormProvider, useForm } from "react-hook-form";
import * as yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";
import { addNewStory } from "@/services/admin-services";

type Language = "eng" | "kaz" | "rus";

interface FileSection {
  imageFile: File | null;
  imagePreview: string | null;
  link: string;
}

interface FormValues {
  translations: {
    language: Language;
    name: string;
  }[];
  fileSections: FileSection[];
}

const validationSchema = yup.object({
  translations: yup.array().of(
    yup.object({
      language: yup.string().oneOf(["eng", "kaz", "rus"]).required(),
      name: yup.string().required("Name is required"),
    })
  ),
  fileSections: yup.array().of(
    yup.object({
      link: yup.string().url("Invalid link").required("Link is required"),
    })
  ),
});

const Page = () => {
  const [isPending, startTransition] = useTransition();
  const [fileSections, setFileSections] = useState<FileSection[]>([
    { imageFile: null, imagePreview: null, link: "" }
  ]);
  const [usedLanguages, setUsedLanguages] = useState<Set<Language>>(new Set(["eng"]));

  const methods = useForm<FormValues>({
    resolver: yupResolver(validationSchema) as any,
    defaultValues: {
      translations: [{ language: "eng", name: "" }],
      fileSections: [{ link: "" }],
    },
  });

  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
    getValues,
    watch,
  } = methods;

  const translations = watch("translations");

  const triggerFileInputClick = (index: number) => {
    const fileInput = document.querySelector(`input[data-index="${index}"]`) as HTMLInputElement;
    if (fileInput) fileInput.click();
  };

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>, index: number) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      const reader = new FileReader();
      
      reader.onload = (e) => {
        const result = e.target?.result as string;
        const newFileSections = [...fileSections];
        newFileSections[index] = {
          ...newFileSections[index],
          imageFile: file,
          imagePreview: result,
        };
        setFileSections(newFileSections);
      };
      reader.readAsDataURL(file);
    }
  };

  const addTranslation = () => {
    const currentTranslations = getValues("translations");
    const availableLanguages: Language[] = ["eng", "kaz", "rus"];
    const unusedLanguage = availableLanguages.find(
      (lang) => !usedLanguages.has(lang as Language)
    ) as Language;

    if (unusedLanguage) {
      setValue("translations", [
        ...currentTranslations,
        { language: unusedLanguage, name: "" },
      ]);
      setUsedLanguages((prev) => new Set([...prev, unusedLanguage]));
    }
  };

  const removeTranslation = (index: number) => {
    const currentTranslations = getValues("translations");
    const languageToRemove = currentTranslations[index].language;
    
    const newTranslations = currentTranslations.filter((_, i) => i !== index);
    setValue("translations", newTranslations);
    
    setUsedLanguages((prev) => {
      const updated = new Set(prev);
      updated.delete(languageToRemove);
      return updated;
    });
  };

  const addFileSection = () => {
    setFileSections([...fileSections, { imageFile: null, imagePreview: null, link: "" }]);
  };

  const removeFileSection = (index: number) => {
    const newFileSections = fileSections.filter((_, i) => i !== index);
    setFileSections(newFileSections);
  };

  const onSubmit = async (data: FormValues) => {
    startTransition(async () => {
      try {
        const timestamp = Date.now();
        const fileObject: Record<string, string> = {};
        
        // Get the banner name from translations
        const bannerName = data.translations[0].name; 
        // Upload all images and create the file object
        for (let i = 0; i < fileSections.length; i++) {
          const section = fileSections[i];
          if (section.imageFile) {
            const { signedUrl, key } = await generateSignedUrlForStories(
              `${timestamp}-${bannerName}`,
              section.imageFile.name,
              section.imageFile.type
            );

            const uploadResponse = await fetch(signedUrl, {
              method: "PUT",
              body: section.imageFile,
              headers: {
                "Content-Type": section.imageFile.type,
              },
            });

            if (!uploadResponse.ok) {
              throw new Error("Failed to upload image to S3");
            }

            fileObject[key] = section.link;
          }
        }

        // Transform translations array into name object
        const nameObject = data.translations.reduce((acc, { language, name }) => {
          acc[language] = name;
          return acc;
        }, {} as Record<Language, string>);

        const payload = {
          name: nameObject,
          file: fileObject
        };

        console.log('payload:', payload);
        const response = await addNewStory("/admin/stories", payload);

        if (response?.status === 201) {
          toast.success("Banner added successfully");
          window.location.href = "/admin/stories"
        } else {
          toast.error("Failed to add banner");
        }
      } catch (error: any) {
        toast.error(
          error?.response?.status === 400
            ? error?.response?.data?.message
            : "An error occurred"
        );
      }
    });
  };

  return ( 
    <div className="bg-white p-5 rounded-[20px]">
      <div className="main-form bg-white p-[30px] rounded-[20px]">
        <FormProvider {...methods}>
          <form onSubmit={handleSubmit(onSubmit)} className="form-box">
            <div className="">
              {translations.map((_, index) => (
                <div key={index} className="mb-3">
                  <p className="mb-1 text-sm text-darkBlack">Name/Title of the banner</p>
                  <div className="flex items-center gap-[5px] w-full">
                    <label className="!flex bg-[#F5F5F5] rounded-[10px] w-full">
                      <select
                        {...register(`translations.${index}.language`)}
                        className="!mt-0 max-w-[80px] !bg-[#D9D9D9]"
                      >
                        <option value="eng">Eng</option>
                        <option value="kaz">Kaz</option>
                        <option value="rus">Rus</option>
                      </select>
                      <input
                        type="text"
                        {...register(`translations.${index}.name`)}
                        placeholder="Enter name"
                        className="!mt-0 flex-1"
                      />
                    </label>
                    {index === 0 ? (
                      <button
                        type="button"
                        onClick={addTranslation}
                        disabled={usedLanguages.size >= 3}
                        className="bg-[#70A1E5] text-white px-5 py-3 rounded-[10px] text-sm"
                      >
                        Add
                      </button>
                    ) : (
                      <button
                        type="button"
                        onClick={() => removeTranslation(index)}
                        className="bg-[#FF0004] text-white px-5 py-3 rounded-[10px] text-sm"
                      >
                        Remove
                      </button>
                    )}
                  </div>
                  {errors.translations?.[index]?.name && (
                    <p className="text-red-500 text-sm mt-1">
                      {errors.translations[index]?.name?.message}
                    </p>
                  )}
                </div>
              ))}
              <div className="mt-10">
                {fileSections.map((section, index) => (
                  <div key={index} className="repeat-section mb-8">
                    <div className="custom relative mb-5">
                      {section.imagePreview ? (
                        <div className="relative">
                          <Image
                            unoptimized
                            src={section.imagePreview}
                            alt="Preview"
                            width={340}
                            height={340}
                            className="rounded-[10px] w-full h-full object-cover"
                          />
                        </div>
                      ) : (
                        <div className="grid place-items-center">
                          <Image
                            unoptimized
                            src={preview}
                            alt="upload"
                            width={340}
                            height={340}
                            className="rounded-[10px] w-full"
                          />
                        </div>
                      )}
                      <div className="relative mt-5">
                        <input
                          className="absolute top-0 left-0 h-full w-full opacity-0 p-0 cursor-pointer"
                          type="file"
                          accept="image/*"
                          data-index={index}
                          onChange={(e) => handleImageChange(e, index)}
                        />
                        {section.imagePreview ? (
                          <button
                            type="button"
                            onClick={() => triggerFileInputClick(index)}
                            className="bg-orange text-white text-sm px-4 py-[14px] text-center rounded-[28px] w-full"
                          >
                            Edit
                          </button>
                        ) : (
                          <p
                            className="bg-orange text-white text-sm px-4 py-[14px] text-center rounded-[28px] cursor-pointer"
                            onClick={() => triggerFileInputClick(index)}
                          >
                            Upload Image
                          </p>
                        )}
                      </div>
                    </div>
                    <label>
                      Link
                      <input
                        type="text"
                        value={section.link}
                        onChange={(e) => {
                          const newFileSections = [...fileSections];
                          newFileSections[index] = {
                            ...newFileSections[index],
                            link: e.target.value,
                          };
                          setFileSections(newFileSections);
                        }}
                        placeholder="https://example.com"
                        className="w-full"
                      />
                    </label>
                    {index > 0 && (
                      <button
                        type="button"
                        onClick={() => removeFileSection(index)}
                        className="bg-[#FF0004] text-white px-5 py-3 mt-3 rounded-[10px] text-sm"
                      >
                        Remove Section
                      </button>
                    )}
                  </div>
                ))}
                <button
                  type="button"
                  onClick={addFileSection}
                  className="bg-[#70A1E5] text-white px-5 py-3 rounded-[10px] text-sm"
                >
                  Add New Section
                </button>
              </div>
              <button
                type="submit"
                disabled={isPending}
                className="bg-orange text-white text-sm px-4 mt-10 py-[14px] text-center rounded-[28px] w-full"
              >Add New Banner</button>
            </div>
          </form>
        </FormProvider>
      </div>
    </div>
  );
};

export default Page;

"use client";
import React, { useState, useTransition } from "react";
import Image from "next/image";
import preview from "@/assets/images/preview.png";
import { toast } from "sonner";
import { generateSignedUrlForStories } from "@/actions";
import { FormProvider, useForm } from "react-hook-form";
import * as yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";
import { addNewStory } from "@/services/admin-services";

type Language = "eng" | "kaz" | "rus";

interface RepeatSection {
  imageFile: File | null;
  imagePreview: string | null;
  link: string;
}

interface FormValues {
  translations: {
    language: Language;
    name: string;
  }[];
  repeatSections: RepeatSection[];
}

const validationSchema = yup.object({
  translations: yup.array().of(
    yup.object({
      language: yup.string().oneOf(["eng", "kaz", "rus"]).required(),
      name: yup.string().required("Name is required"),
    })
  ),
  repeatSections: yup.array().of(
    yup.object({
      link: yup.string().url("Invalid link").required("Link is required"),
    })
  ),
});

const Page = () => {
  const [isPending, startTransition] = useTransition();
  const [usedLanguages, setUsedLanguages] = useState<Set<Language>>(new Set(["eng"]));
  const methods = useForm<FormValues>({
    resolver: yupResolver(validationSchema) as any,
    defaultValues: {
      translations: [{ language: "eng", name: "" }],
      repeatSections: [{ imageFile: null, imagePreview: null, link: "" }],
    },
  });

  const { register, handleSubmit, setValue, getValues, watch, formState: { errors } } = methods;
  const translations = watch("translations");
  const repeatSections = watch("repeatSections");

  const addTranslation = () => {
    const currentTranslations = getValues("translations");
    const availableLanguages: Language[] = ["eng", "kaz", "rus"];
    const unusedLanguage = availableLanguages.find((lang) => !usedLanguages.has(lang)) as Language;

    if (unusedLanguage) {
      setValue("translations", [
        ...currentTranslations,
        { language: unusedLanguage, name: "" },
      ]);
      setUsedLanguages((prev) => new Set([...prev, unusedLanguage]));
    }
  };

  const removeTranslation = (index: number) => {
    const currentTranslations = getValues("translations");
    const languageToRemove = currentTranslations[index].language;

    const newTranslations = currentTranslations.filter((_, i) => i !== index);
    setValue("translations", newTranslations);

    setUsedLanguages((prev) => {
      const updated = new Set(prev);
      updated.delete(languageToRemove);
      return updated;
    });
  };

  const handleImageChange = (index: number, e: React.ChangeEvent<HTMLInputElement>) => {
    const currentSections = getValues("repeatSections");
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];

      const reader = new FileReader();
      reader.onload = (event) => {
        currentSections[index] = {
          ...currentSections[index],
          imageFile: file,
          imagePreview: event.target?.result as string,
        };
        setValue("repeatSections", [...currentSections]);
      };
      reader.readAsDataURL(file);
    }
  };

  const repeatBox = () => {
    const currentSections = getValues("repeatSections");
    setValue("repeatSections", [...currentSections, { imageFile: null, imagePreview: null, link: "" }]);
  };

  const removeBox = (index: number) => {
    const currentSections = getValues("repeatSections");
    currentSections.splice(index, 1);
    setValue("repeatSections", [...currentSections]);
  };

  const onSubmit = async (data: FormValues) => {
    startTransition(async () => {
      try {
        const repeatData = await data.repeatSections.reduce(async (accPromise, section, index) => {
          const acc = await accPromise;
          let imageKey = null;
  
          if (section.imageFile) {
            // Use the name from translations or fall back to a default
            const storyName = data.translations[0]?.name.trim() || `story-${index}`;
            const sanitizedStoryName = storyName.replace(/\s+/g, "-").toLowerCase(); // Replace spaces with dashes and lowercase
            const fileName = section.imageFile.name;
  
            // Generate signed URL for S3
            const { signedUrl, key } = await generateSignedUrlForStories(
              sanitizedStoryName, // Folder based on sanitized story name
              fileName,
              section.imageFile.type
            );
  
            const uploadResponse = await fetch(signedUrl, {
              method: "PUT",
              body: section.imageFile,
              headers: {
                "Content-Type": section.imageFile.type,
              },
            });
  
            if (!uploadResponse.ok) {
              throw new Error("Failed to upload image to S3");
            }
  
            imageKey = `stories/${sanitizedStoryName}/${fileName}`; // Build the full path
          }
  
          if (imageKey) {
            acc[imageKey] = section.link; // Add key-value pair to object
          }
          return acc;
        }, Promise.resolve({} as Record<string, string>)); // Initialize as an empty object
  
        // Transform translations array into name object
        const nameObject = data.translations.reduce((acc, { language, name }) => {
          acc[language] = name.trim(); // Ensure trimmed values
          return acc;
        }, {} as Record<Language, string>);
  
        const payload = {
          name: nameObject,
          file: repeatData, // Object with proper paths and links
        };
  
        console.log("payload:", payload);
        // const response = await addNewStory("/admin/stories", payload);
  
        // if (response?.status === 201) {
        //   toast.success("Banner added successfully");
        //   window.location.href = "/admin/stories";
        // } else {
        //   toast.error("Failed to add banner");
        // }
      } catch (error: any) {
        toast.error(
          error?.response?.status === 400
            ? error?.response?.data?.message
            : "An error occurred"
        );
      }
    });
  };
  
  

  return (
    <div className="bg-white p-5 rounded-[20px]">
      <div className="main-form">
      <FormProvider {...methods}>
        <form onSubmit={handleSubmit(onSubmit)}>
          {translations.map((_, index) => (
            <div key={index} className="mb-3">
              <p className="mb-1 text-sm text-darkBlack">Name/Title of the story</p>
              <div className="flex items-center gap-[5px] w-full">
              <label className="!flex bg-[#F5F5F5] rounded-[10px] w-full">
                        <select
                            {...register(`translations.${index}.language`)}
                            className="!mt-0 max-w-[80px] !bg-[#D9D9D9]"
                          >
                            <option value="eng">Eng</option>
                            <option value="kaz">Kaz</option>
                            <option value="rus">Rus</option>
                          </select>
                          <input
                            type="text"
                            {...register(`translations.${index}.name`)}
                            placeholder="Enter name"
                            className="!mt-0 flex-1"
                          />
                        </label>
                {index === 0 ? (
                 <button
                 type="button"
                 onClick={addTranslation}
                 disabled={usedLanguages.size >= 3}
                 className="bg-[#70A1E5] text-white px-5 py-3 rounded-[10px] text-sm"
               >Add</button>
                ) : (
                  <button
                  type="button"
                  onClick={() => removeTranslation(index)}
                  className="bg-[#FF0004] text-white px-5 py-3 rounded-[10px] text-sm"
                > Remove</button>
                )}
              </div>
            </div>
          ))}
          {repeatSections.map((section, index) => (
            <div key={index} className="repeat-section">
              <div>
                {section.imagePreview ? (
                  <Image src={section.imagePreview} alt="Preview" width={200} height={200} />
                ) : (
                  <p>No Image</p>
                )}
                <input type="file" accept="image/*" onChange={(e) => handleImageChange(index, e)} />
              </div>
              <input type="text" {...register(`repeatSections.${index}.link`)} placeholder="Link" />
              <button type="button" onClick={() => removeBox(index)}>Remove</button>
            </div>
          ))}
          <button type="button" onClick={repeatBox}>Add</button>
          <button type="submit"  className="bg-orange text-white text-sm px-4 mt-10 py-[14px] text-center rounded-[28px] w-full" 
          disabled={isPending}>Add New Story</button>
        </form>
      </FormProvider>
      </div>
    </div>
  );
};

export default Page;
